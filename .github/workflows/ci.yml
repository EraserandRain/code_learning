name: Actions CI
env:
  CPROJECT_PATH: c/cproject
  REACT_PAGE_PATH: frontend/react/next/
on:
  push:
    branches:
      - main
    paths:
      - .github/**
      - c/cproject/**
      - frontend/react/next/**
  workflow_dispatch:
permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: true


jobs:
  github-pages-react-demo:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            ${{ env.REACT_PAGE_PATH }}

      - name: Install packages and Build
        run: |
          cd ${{ env.REACT_PAGE_PATH }}
          npm add -g pnpm
          pnpm install
          pnpm build

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: out
      # - name: Setup Pages
      #   uses: actions/configure-pages@v3

      # - name: Upload artifact
      #   uses: actions/upload-pages-artifact@v2
      #   with:
      #     path: "./${{ env.REACT_PAGE_PATH }}/out"

      # - name: Deploy to GitHub Pages
      #   id: deployment
      #   uses: actions/deploy-pages@v2

  cproject-docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      
      - name: Create docker cache folder
        run: mkdir -p /tmp/docker

      - name: Restore docker image
        id: cache-docker
        uses: actions/cache@v3
        with:
          path: /tmp/docker
          key: ${{ runner.os }}-docker-${{ hashFiles('Dockerfile') }}
       
      - name: Build docker builder-image
        if: steps.cache-docker.outputs.cache-hit != 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ env.CPROJECT_PATH }}/Dockerfile
          tags: cproject-builder:latest
          outputs: type=docker,dest=/tmp/docker/${{ runner.os }}-builder-image.tar

  cproject-build-and-test:
    runs-on: ubuntu-latest
    needs: cproject-docker-build
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      
      - name: Restore docker image
        id: cache-docker
        uses: actions/cache@v3
        with:
          path: /tmp/docker
          key: ${{ runner.os }}-docker-${{ hashFiles('Dockerfile') }}
      
      - name: Load image
        run: |
          docker load --input /tmp/docker/${{ runner.os }}-builder-image.tar
          docker image ls -a
      
      - name: Build library
        run: |
          cd ${{ env.CPROJECT_PATH }}
          docker run \
            --rm \
            --workdir /builder/mnt \
            -v ${{ github.workspace }}/${{ env.CPROJECT_PATH }}:/builder/mnt \
            cproject-builder:latest \
            /bin/bash -c "rm -rf build; cmake -B build; cmake --build build"
      
      - name: Test library
        run: |
          cd ${{ env.CPROJECT_PATH }}
          docker run \
            --rm \
            --workdir /builder/mnt/tests/unittest \
            -v ${{ github.workspace }}/${{ env.CPROJECT_PATH }}:/builder/mnt \
            cproject-builder:latest \
            /bin/bash -c "ceedling clobber; ceedling gcov:all; ceedling utils:gcov"
      
      - name: Archive coverage results
        shell: bash
        run: |
          cd ${{ env.CPROJECT_PATH }}
          staging="reports-${{github.run_number}}"
          mkdir -p "$staging"
          cp -r tests/unittest/build/artifacts/gcov "$staging"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
      
      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: reports-${{github.run_number}}
          path: ${{ env.ASSET }}
          retention-days: 3
